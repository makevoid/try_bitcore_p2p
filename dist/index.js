// Generated by IcedCoffeeScript 108.0.11
(function() {
  var BloomFilter, Messages, Networks, Pool, address, block, c, code, filter, getPeerFromPool, iced, mainLoop, messages, msgFilter, msgGetBlock, pool, transaction, _, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  Pool = require('bitcore-p2p').Pool;

  BloomFilter = require('bitcore-p2p').BloomFilter;

  Networks = require('bitcore-lib').Networks;

  Messages = require('bitcore-p2p').Messages;

  _ = require('underscore');

  c = console;

  block = '000000000000000002a7df0960539e0c68ae506e2201bbe8e61eb2d2ddc36ed5';

  address = '1DTZQVtnUm1dVmpDg8eWgXUqQe3hhYgDry';

  transaction = "873be417565c2e9fe9ee31db1064db83ea8e18069b6f8f93aa4f14180d0f7111";

  pool = new Pool({
    network: Networks.livenet
  });

  messages = new Messages();

  code = new Buffer(address, 'base64');

  filter = BloomFilter.create(1000, 0.1);

  filter.insert(code);

  msgFilter = messages.FilterLoad(filter);

  getPeerFromPool = function(cb) {
    var message, peer, peerInv, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    pool.connect();
    peerInv = function(cb) {
      cb = _.once(cb);
      return pool.on('peerinv', function(peer, message) {
        return cb(peer, message);
      });
    };
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/makevoid/apps/try_bitcore_p2p/index.coffee"
        });
        peerInv(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              peer = arguments[0];
              return message = arguments[1];
            };
          })(),
          lineno: 33
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        c.log('peerinv:', peer.host);
        pool.disconnect();
        return cb(peer);
      };
    })(this));
  };

  msgGetBlock = messages.GetData.forBlock(block);

  mainLoop = function() {
    var peer, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/makevoid/apps/try_bitcore_p2p/index.coffee"
        });
        getPeerFromPool(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return peer = arguments[0];
            };
          })(),
          lineno: 44
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        peer.connect();
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/makevoid/apps/try_bitcore_p2p/index.coffee"
          });
          peer.on('ready', __iced_deferrals.defer({
            lineno: 47
          }));
          __iced_deferrals._fulfill();
        })(function() {
          c.log(peer.version, peer.subversion, peer.bestHeight);
          peer.on('tx', function(msg) {
            return c.log("tx:", msg);
          });
          peer.on('block', function(msg) {
            block = msg.block;
            return c.log("block:", "- txs_length:", block.transactions.length, "prev:", block.header.prevHash.toString('hex'));
          });
          peer.on('addr', function(msg) {
            var addr, _i, _len, _ref, _results;
            c.log("addr:", "- ips:");
            _ref = msg.addresses;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              addr = _ref[_i];
              _results.push(c.log(addr.ip.v4));
            }
            return _results;
          });
          peer.on('peerblock', function(msg) {
            return c.log("peerblock:", msg);
          });
          peer.on('merkleblock', function(msg) {
            return c.log("merkleblock:", msg);
          });
          peer.on('disconnect', function() {
            c.log('connection from peer closed, getting another peer...');
            return mainLoop();
          });
          return peer.sendMessage(msgGetBlock);
        });
      };
    })(this));
  };

  mainLoop();

}).call(this);
